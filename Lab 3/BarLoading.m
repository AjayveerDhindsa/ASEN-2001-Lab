 %% Import data from spreadsheet
% Script for importing data from the following spreadsheet:
%
%    Workbook: C:\Users\Jeheres something on\Desktop\Lab 3\ASEN 2001 Lab 3 Test Data (1).xls
%    Worksheet: Sheet1
%
% Auto-generated by MATLAB on 04-Nov-2019 09:57:07

%% Setup the Import Options

close all
clear all

opts = spreadsheetImportOptions("NumVariables", 7);

% Specify sheet and range
opts.Sheet = "Sheet1";
opts.DataRange = "A3:G38";

% Specify column names and types
opts.VariableNames = ["Test", "FN", "am", "wm", "d_fm", "VarName6", "CommentonFailure"];
opts.SelectedVariableNames = ["Test", "FN", "am", "wm", "d_fm", "VarName6", "CommentonFailure"];
opts.VariableTypes = ["double", "double", "double", "double", "double", "double", "string"];
opts = setvaropts(opts, 7, "WhitespaceRule", "preserve");
opts = setvaropts(opts, 7, "EmptyFieldRule", "auto");

% Import the data
Lab3 = readtable("ASEN 2001 Lab 3 Test Data (1).xls", opts, "UseExcel", false);


%% Clear temporary variables
clear opts

%% Bending and Shear
% Seperate the bending from the shear
Data = Lab3{(1:24),(1:6)};
for i = 1:length(Data)
    if Data(i,6)==1
        Bending(i,:) = Data(i,2:5);
    else
        Shear(i,:) = Data(i,2:5);
    end
end
 
%% Create the plots 
% Plot the bending and Shear 
% get the average failure stress for bending and shear
% Eliminate outlyers in data
Bending(Bending==0)=[]; 
Bending = reshape(Bending,17,4);
Shear(Shear==0) = [];
Shear=reshape(Shear,7,4);
Bending(7,:)=[];
Bending(10,:)=[];
Shear(6,:)=[];
Shear(4,:)=[];

BendingForce = Bending(:,1);
FDB = Bending(:,4);
ShearForce = Shear(:,1);
FDS = Shear(:,4); 
plot(FDB,BendingForce,'b*')
hold on
plot(FDS,ShearForce,'ro')
xlabel('Failure Distance (m)')
ylabel('Force (N)')
legend('Bending', 'Shear')
hold off


MavgFail = mean(Bending(:,1));
VavgFail = mean(Shear(:,1));


%% Failure stresses
% solve for Tau and Sigma
Ef = 2.67 * 10^9;   %Young's Modulus for the foam
Eb = 3.25 * 10^9;   %Young's Modulus for the balsa
Ib = 2*(((4*.0254)*((1/32)*.0254)^3)/12 + ((4*.0254)*(1/32)*.0254)*.390625^2); % moment of inertia for balsa
If = (((4*.0254)*((3/4)*.0254)^3)/12); % moment of inertia for foam

SigmaFail = MavgFail*.5/(Ib+(Ef/Eb)*If);
SigmaAllow = SigmaFail/1.5;

TauFail = (3*VavgFail)/(2*(4*.0254)*(.75*.0254));
TauAllow = TauFail/1.5;

% Wiffle Tree Weights
Sleeve = 0.49 ; %N sleeve
six_in_bar = 1.77 ; %N 6 inch bar
twelve_in_bar = 2.94 ; %N 12 inch bar
eighteen_in_bar = 3.92 ; %N 18 inch bar

%% Plot the optimal beam shape
% use symbolic variables to create the best shape 

% Parameters
L = 36 * 0.0254;

% Symbolic variables
syms x p0

% Force per unit length
qx = 4 * 0.0254 * p0 * sqrt(1-(2*x/L)^2);

% Reactions
R = -int(qx,x,-L/2,L/2)/2;

% Shear force
Vx = R + int(qx,x,-L/2,x);

% Moment
Mx = int(Vx,x,-L/2,x);

% Bending moment at x=0
M0 = subs(subs(Mx,x,0),p0,1);

%width function
t = ((1/16) + (3/4))*.0254; %thickness of the beam
tb = .0254/32;  %Thickness of the balsa
tf = 3*.0254/4; %Thickness of the foam
Ef = 2.67 * 10^9;   %Young's Modulus for the foam
Eb = 3.25 * 10^9;   %Young's Modulus for the balsa
SigmaAllow;   %Failure stress in Pa
wx = (Mx*t/2)/(SigmaAllow * ( (2*tb*((1/12)+((t-tb)/2)^2)) + (Ef/Eb)*((tf^3)/12) ));

% Evaluate at a grid 
xgrid = -L/2:1*0.0254:L/2;
p0_computed = 4.3258*10^4;
Mgrid = (2*.0254/415.3)* subs(subs(Mx,p0,p0_computed),x,xgrid);
Vgrid = (2*.0254/1578)* subs(subs(Vx,p0,p0_computed),x,xgrid);

% Plot moment diagram
plot(xgrid/.0254,Mgrid/.0254,'R',xgrid/.0254,-Vgrid/.0254,'B')
hold on
plot(xgrid/.0254,-Mgrid/.0254,'R')
plot(xgrid/.0254,Vgrid/.0254,'B')

xlabel('x[in]');
ylabel('y[in]');
title('Shape of Beam') % Title of figure
legend('Moment','Shear','Location','SouthEast'); % Create legend in lower left corner
%% Loading Function
syms x
Px = p0_computed * sqrt(1 - (2*x / L)^2);
IntegralBounds = 0:(L/8):(L/2);

for i = 1:length(IntegralBounds)-1
    wint(i) = int(Px*x,x,IntegralBounds(i),IntegralBounds(i+1));
    nwint(i) = int(Px,x,IntegralBounds(i),IntegralBounds(i+1));
    centroid(i) = wint(i)/nwint(i);
end

l1 = centroid(2)-centroid(1);
l2 = ((nwint(1)+Sleeve+(.5*six_in_bar))*l1)/((nwint(1)+Sleeve+(.5*six_in_bar))+(nwint(2)+Sleeve+(.5*six_in_bar)));
l3 = centroid(4)-centroid(3);
l4 = ((nwint(3)+Sleeve+(.5*six_in_bar))*l3)/((nwint(3)+Sleeve+(.5*six_in_bar))+(nwint(4)+Sleeve+(.5*six_in_bar)));
l5 = (centroid(4)-l4)-(centroid(2)-l2);
l6 = (((nwint(1)+Sleeve+(.5*six_in_bar))+(nwint(2)+Sleeve+(.5*six_in_bar))+(.5*twelve_in_bar))*l5)/((nwint(1)+Sleeve+(.5*six_in_bar))+(nwint(2)+Sleeve+(.5*six_in_bar)+(.5*twelve_in_bar))+((nwint(3)+Sleeve+(.5*six_in_bar))+(nwint(4)+Sleeve+(.5*six_in_bar)+(.5*twelve_in_bar))));